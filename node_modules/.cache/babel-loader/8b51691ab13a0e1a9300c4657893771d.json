{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Projects/rockypapersissors/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport { CONST } from './App.constant';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [hasGameStarted, setGameStarted] = useState(false);\n  const game = localStorage.getItem('rockpapersissors');\n  const [activePlayer, setActivePlayer] = useState(CONST.player1);\n  const [players, updatePlayers] = useState([{\n    name: CONST.player1Name,\n    score: CONST.player1Score\n  }, {\n    name: CONST.player2Name,\n    score: CONST.player2Score\n  }]);\n  const isActivePlayer = useCallback(index => index == activePlayer);\n  const getPlayerName = useCallback(index => players[index].name);\n  const getPlayerScore = useCallback(index => players[index].score);\n  const getPlayerHeaderHTML = useCallback(index => /*#__PURE__*/_jsxDEV(\"p\", {\n    className: isActivePlayer(index) && 'active',\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [CONST[`player${index + 1}Label`], \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 54\n    }, this), \" \", getPlayerName(index), \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Score:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 126\n    }, this), \" \", getPlayerScore(index)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this)); // const choices = ['rock', 'paper', 'sissors'];\n  // const [model, setModel] = useState('CLOSED');\n  // const [players, setPlayers] = useState({\n  //   player1: { name: 'Michael', score: 12 },\n  //   player2: { name: 'Michael', score: 12 },\n  // });\n  // const hand1 = useRef();\n  // const hand2 = useRef();\n  // const onPlayerHand = useCallback((player) => {\n  //   const choice = choices[Math.floor(Math.random() * 3)];\n  //   player.current.classList.remove('rock', 'paper', 'sissors');\n  //   setTimeout(() => player.current.classList.add(choice), 1);\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: hasGameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"model\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Welcome to Rocky, Paper, and Sissors!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [CONST.formLabel, \" 1: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"player1\",\n              type: \"text\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [CONST.formLabel, \" 2: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"player2\",\n              type: \"text\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 28\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"x2xXH1GkcjQh0ME0iVNhp33XZ4Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useRef","useState","logo","CONST","App","hasGameStarted","setGameStarted","game","localStorage","getItem","activePlayer","setActivePlayer","player1","players","updatePlayers","name","player1Name","score","player1Score","player2Name","player2Score","isActivePlayer","index","getPlayerName","getPlayerScore","getPlayerHeaderHTML","formLabel"],"sources":["/Users/admin/Projects/rockypapersissors/src/App.js"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport { CONST } from './App.constant';\nimport './App.css';\n\nfunction App() {\n  const [hasGameStarted, setGameStarted] = useState(false);\n  const game = localStorage.getItem('rockpapersissors');\n  const [activePlayer, setActivePlayer] = useState(CONST.player1);\n  const [players, updatePlayers] = useState([\n    {name:CONST.player1Name,score:CONST.player1Score},\n    {name:CONST.player2Name,score:CONST.player2Score},\n  ]);\n\n  const isActivePlayer = useCallback((index) => index == activePlayer);\n  const getPlayerName = useCallback((index) => players[index].name);\n  const getPlayerScore = useCallback((index) => players[index].score);\n  const getPlayerHeaderHTML = useCallback((index) =>\n    <p className={isActivePlayer(index) && 'active'}><span>{CONST[`player${index+1}Label`]}:</span> {getPlayerName(index)} - <span>Score:</span> {getPlayerScore(index)}</p>);\n\n\n\n\n  // const choices = ['rock', 'paper', 'sissors'];\n  // const [model, setModel] = useState('CLOSED');\n  // const [players, setPlayers] = useState({\n  //   player1: { name: 'Michael', score: 12 },\n  //   player2: { name: 'Michael', score: 12 },\n  // });\n  // const hand1 = useRef();\n  // const hand2 = useRef();\n  // const onPlayerHand = useCallback((player) => {\n  //   const choice = choices[Math.floor(Math.random() * 3)];\n  //   player.current.classList.remove('rock', 'paper', 'sissors');\n  //   setTimeout(() => player.current.classList.add(choice), 1);\n  // });\n\n  return (\n    <div className=\"app\">\n        {hasGameStarted && <div className=\"model\">\n          <div className=\"container\">\n            <h2>Welcome to Rocky, Paper, and Sissors!</h2>\n              {/* <div className=\"controls\">\n                <button>{CONST.newGameBtn</button>\n                <button disabled=\"!game\">Load Game</button>\n              </div> */}\n              <form>\n              {/* <form onSubmit={() => setModel('CLOSED')}> */}\n                <label>{CONST.formLabel} 1: <input name=\"player1\" type=\"text\" required /></label>\n                <label>{CONST.formLabel} 2: <input name=\"player2\" type=\"text\" required /></label>\n                <button>Start Game</button>\n              </form>\n          </div>\n        </div>}\n      {/* <div className=\"game\">\n        <div className=\"header\">\n          {getPlayerHeaderHTML(CONST.player1)}\n          <p>vs</p>\n          {getPlayerHeaderHTML(CONST.player2)}\n        </div>\n        <div className=\"container\">\n          <div className=\"player\">\n            <div  className=\"hand\"></div>\n          </div>\n          <div className=\"player\">\n            <div  className=\"hand\"></div>\n          </div>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,cAAD,EAAiBC,cAAjB,IAAmCL,QAAQ,CAAC,KAAD,CAAjD;EACA,MAAMM,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAb;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAACE,KAAK,CAACS,OAAP,CAAhD;EACA,MAAM,CAACC,OAAD,EAAUC,aAAV,IAA2Bb,QAAQ,CAAC,CACxC;IAACc,IAAI,EAACZ,KAAK,CAACa,WAAZ;IAAwBC,KAAK,EAACd,KAAK,CAACe;EAApC,CADwC,EAExC;IAACH,IAAI,EAACZ,KAAK,CAACgB,WAAZ;IAAwBF,KAAK,EAACd,KAAK,CAACiB;EAApC,CAFwC,CAAD,CAAzC;EAKA,MAAMC,cAAc,GAAGtB,WAAW,CAAEuB,KAAD,IAAWA,KAAK,IAAIZ,YAArB,CAAlC;EACA,MAAMa,aAAa,GAAGxB,WAAW,CAAEuB,KAAD,IAAWT,OAAO,CAACS,KAAD,CAAP,CAAeP,IAA3B,CAAjC;EACA,MAAMS,cAAc,GAAGzB,WAAW,CAAEuB,KAAD,IAAWT,OAAO,CAACS,KAAD,CAAP,CAAeL,KAA3B,CAAlC;EACA,MAAMQ,mBAAmB,GAAG1B,WAAW,CAAEuB,KAAD,iBACtC;IAAG,SAAS,EAAED,cAAc,CAACC,KAAD,CAAd,IAAyB,QAAvC;IAAA,wBAAiD;MAAA,WAAOnB,KAAK,CAAE,SAAQmB,KAAK,GAAC,CAAE,OAAlB,CAAZ;IAAA;MAAA;MAAA;MAAA;IAAA,QAAjD,OAAiGC,aAAa,CAACD,KAAD,CAA9G,sBAAyH;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAzH,OAA8IE,cAAc,CAACF,KAAD,CAA5J;EAAA;IAAA;IAAA;IAAA;EAAA,QADqC,CAAvC,CAZa,CAkBb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,UACKjB,cAAc,iBAAI;MAAK,SAAS,EAAC,OAAf;MAAA,uBACjB;QAAK,SAAS,EAAC,WAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAMI;UAAA,wBAEE;YAAA,WAAQF,KAAK,CAACuB,SAAd,uBAA4B;cAAO,IAAI,EAAC,SAAZ;cAAsB,IAAI,EAAC,MAA3B;cAAkC,QAAQ;YAA1C;cAAA;cAAA;cAAA;YAAA,QAA5B;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF,eAGE;YAAA,WAAQvB,KAAK,CAACuB,SAAd,uBAA4B;cAAO,IAAI,EAAC,SAAZ;cAAsB,IAAI,EAAC,MAA3B;cAAkC,QAAQ;YAA1C;cAAA;cAAA;cAAA;YAAA,QAA5B;UAAA;YAAA;YAAA;YAAA;UAAA,QAHF,eAIE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAJF;QAAA;UAAA;UAAA;UAAA;QAAA,QANJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADiB;MAAA;MAAA;MAAA;IAAA;EADvB;IAAA;IAAA;IAAA;EAAA,QADF;AAkCD;;GAlEQtB,G;;KAAAA,G;AAoET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}