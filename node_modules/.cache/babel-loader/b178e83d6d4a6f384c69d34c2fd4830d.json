{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Projects/rockypapersissors/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { CONST } from './App.constant';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const hand1 = useRef();\n  const hand2 = useRef();\n  const choices = ['rock', 'paper', 'sissors'];\n  const [game, setGame] = useState(localStorage.getItem('rockpapersissors'));\n  const [hasGameStarted, setHasGameStarted] = useState(false);\n  const [configNewGame, setConfigNewGame] = useState(false);\n  const [activePlayer, setActivePlayer] = useState(CONST.player1);\n  const isActivePlayer = useCallback(index => index == activePlayer);\n  const getPlayerName = useCallback(index => game[`player${index}`].name);\n  const getPlayerScore = useCallback(index => game[`player${index}`].score);\n  const getPlayerHeaderHTML = useCallback(index => {\n    const classList = isActivePlayer(index) ? 'active' : '';\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classList,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [CONST.playerLabel, \" \", index, \" \", index === 2 && '(computer)', \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 37\n      }, this), \" \", getPlayerName(index), \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [CONST.scoreLabel, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 134\n      }, this), \" \", getPlayerScore(index)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  });\n  const getPlayerNameFieldHTML = useCallback(index => /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [CONST.playerLabel, \" \", index, \": \", /*#__PURE__*/_jsxDEV(\"input\", {\n      name: `player${index}`,\n      type: \"text\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 53\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this));\n\n  const onStartNewGame = event => {\n    event.preventDefault();\n    setGame({\n      player1: {\n        name: event.target.player1.value,\n        score: 0\n      },\n      player2: {\n        name: event.target.player2.value,\n        score: 0\n      } // activePlayer: CONST.player1,\n\n    });\n    setHasGameStarted(true);\n  };\n\n  const onLoadOldGame = () => {\n    const parsedGame = JSON.parse(game);\n    setGame(parsedGame); // setActivePlayer(parsedGame.activePlayer);\n\n    setHasGameStarted(true);\n  };\n\n  const onPlayerHand = ref => {\n    ref.current.classList.remove('rock', 'paper', 'sissors');\n    setTimeout(() => ref.current.classList.add(choices[Math.floor(Math.random() * 3)]));\n    setTimeout(() => {\n      hand2.current.classList.remove('rock', 'paper', 'sissors');\n      setTimeout(() => hand2.current.classList.add(choices[Math.floor(Math.random() * 3)]));\n    }, 500);\n  };\n\n  const getHandClasslist = index => {\n    let classList = 'hand';\n    if (activePlayer == index) classList += ' active';else classList += ' disabled';\n    return classList;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [!hasGameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"model\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: CONST.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), configNewGame ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => onStartNewGame(event),\n          children: [[1, 2].map(index => getPlayerNameFieldHTML(index)), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: CONST.startGameBtn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setConfigNewGame(true),\n            children: CONST.newGameBtn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onLoadOldGame(),\n            disabled: !game,\n            children: CONST.loadGameBtn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }, this), hasGameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [getPlayerHeaderHTML(CONST.player1), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: CONST.vsLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), getPlayerHeaderHTML(CONST.player2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: hand1,\n            className: getHandClasslist(CONST.player1),\n            onClick: () => onPlayerHand(hand1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: hand2,\n            className: getHandClasslist(CONST.player2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"B1KhPtYKNzpt9D3TMvhakkNJM2A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","CONST","App","hand1","hand2","choices","game","setGame","localStorage","getItem","hasGameStarted","setHasGameStarted","configNewGame","setConfigNewGame","activePlayer","setActivePlayer","player1","isActivePlayer","index","getPlayerName","name","getPlayerScore","score","getPlayerHeaderHTML","classList","playerLabel","scoreLabel","getPlayerNameFieldHTML","onStartNewGame","event","preventDefault","target","value","player2","onLoadOldGame","parsedGame","JSON","parse","onPlayerHand","ref","current","remove","setTimeout","add","Math","floor","random","getHandClasslist","title","map","startGameBtn","newGameBtn","loadGameBtn","vsLabel"],"sources":["/Users/admin/Projects/rockypapersissors/src/App.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { CONST } from './App.constant';\nimport './App.css';\n\nfunction App() {\n  const hand1 = useRef();\n  const hand2 = useRef();\n  const choices = ['rock', 'paper', 'sissors'];\n\n  const [game, setGame] = useState(localStorage.getItem('rockpapersissors'));\n  const [hasGameStarted, setHasGameStarted] = useState(false);\n  const [configNewGame, setConfigNewGame] = useState(false);\n  const [activePlayer, setActivePlayer] = useState(CONST.player1);\n\n  const isActivePlayer = useCallback((index) => index == activePlayer);\n  const getPlayerName = useCallback((index) => game[`player${index}`].name);\n  const getPlayerScore = useCallback((index) => game[`player${index}`].score);\n\n  const getPlayerHeaderHTML = useCallback((index) => {\n    const classList = isActivePlayer(index) ? 'active' : '';\n    return <p className={classList}><span>{CONST.playerLabel} {index} {index === 2 && '(computer)'}:</span> {getPlayerName(index)} - <span>{CONST.scoreLabel}:</span> {getPlayerScore(index)}</p>\n  });\n  const getPlayerNameFieldHTML = useCallback((index) => \n    <label key={index}>{CONST.playerLabel} {index}: <input name={`player${index}`} type=\"text\" required /></label>);\n\n  const onStartNewGame = (event) => {\n    event.preventDefault();\n    setGame({\n      player1: {\n        name: event.target.player1.value,\n        score: 0,\n      },\n      player2: {\n        name: event.target.player2.value,\n        score: 0,\n      },\n      // activePlayer: CONST.player1,\n    });\n    setHasGameStarted(true);\n  };\n  const onLoadOldGame = () => {\n    const parsedGame = JSON.parse(game);\n    setGame(parsedGame);\n    // setActivePlayer(parsedGame.activePlayer);\n    setHasGameStarted(true);\n  }\n  const onPlayerHand = (ref) => {\n    ref.current.classList.remove('rock', 'paper', 'sissors');\n    setTimeout(() => ref.current.classList.add(choices[Math.floor(Math.random() * 3)]));\n    setTimeout(() => {\n      hand2.current.classList.remove('rock', 'paper', 'sissors');\n      setTimeout(() => hand2.current.classList.add(choices[Math.floor(Math.random() * 3)]));\n    }, 500);\n  }\n  const getHandClasslist = (index) => {\n    let classList = 'hand';\n    if (activePlayer == index) classList += ' active';\n    else classList += ' disabled';\n    return classList;\n  }\n\n  return (\n    <div className=\"app\">\n        {!hasGameStarted && <div className=\"model\">\n          <div className=\"container\">\n            <h2>{CONST.title}</h2>\n              {configNewGame ? <form onSubmit={(event) => onStartNewGame(event)}>\n                {[1,2].map((index) => getPlayerNameFieldHTML(index))}\n                <button>{CONST.startGameBtn}</button>\n              </form> : <div className=\"controls\">\n                <button onClick={() => setConfigNewGame(true)}>{CONST.newGameBtn}</button>\n                <button onClick={() => onLoadOldGame()} disabled={!game}>{CONST.loadGameBtn}</button>\n              </div>}\n          </div>\n        </div>}\n      {hasGameStarted && <div className=\"game\">\n        <div className=\"header\">\n          {getPlayerHeaderHTML(CONST.player1)}\n          <p>{CONST.vsLabel}</p>\n          {getPlayerHeaderHTML(CONST.player2)}\n        </div>\n        <div className=\"container\">\n          <div className=\"player\"><div ref={hand1} className={getHandClasslist(CONST.player1)} onClick={() => onPlayerHand(hand1)}></div></div>\n          <div className=\"player\"><div ref={hand2} className={getHandClasslist(CONST.player2)}></div></div>\n        </div>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}