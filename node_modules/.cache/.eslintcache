[{"/Users/admin/Projects/rockypapersissors/src/index.js":"1","/Users/admin/Projects/rockypapersissors/src/App.js":"2","/Users/admin/Projects/rockypapersissors/src/reportWebVitals.js":"3","/Users/admin/Projects/rockypapersissors/src/App.constant.js":"4"},{"size":535,"mtime":1653617290459,"results":"5","hashOfConfig":"6"},{"size":4156,"mtime":1653962888655,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1653617290459,"results":"8","hashOfConfig":"6"},{"size":341,"mtime":1653954837194,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xsnlzh",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/admin/Projects/rockypapersissors/src/index.js",[],[],"/Users/admin/Projects/rockypapersissors/src/App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38"],[],"import { useCallback, useEffect, useRef, useState } from 'react';\nimport { CONST } from './App.constant';\nimport './App.css';\n\nfunction App() {\n  const hand1 = useRef();\n  const hand2 = useRef();\n  const choices = ['rock', 'paper', 'sissors'];\n\n  const [game, setGame] = useState(localStorage.getItem('rockpapersissors'));\n  const [hasGameStarted, setHasGameStarted] = useState(false);\n  const [configNewGame, setConfigNewGame] = useState(false);\n  const [activePlayer, setActivePlayer] = useState(CONST.player1);\n\n  const isActivePlayer = useCallback((index) => index == activePlayer);\n  const getPlayerName = useCallback((index) => game[`player${index}`].name);\n  const getPlayerScore = useCallback((index) => game[`player${index}`].score);\n\n  const getPlayerHeaderHTML = useCallback((index) => {\n    const classList = isActivePlayer(index) ? 'active' : '';\n    return <p className={classList}><span>{CONST.playerLabel} {index} {index === 2 && '(computer)'}:</span> {getPlayerName(index)} - <span>{CONST.scoreLabel}:</span> {getPlayerScore(index)}</p>\n  });\n  const getPlayerNameFieldHTML = useCallback((index) => \n    <label key={index}>{CONST.playerLabel} {index}: <input name={`player${index}`} type=\"text\" required /></label>);\n\n  const onStartNewGame = (event) => {\n    event.preventDefault();\n    setGame({\n      player1: {\n        name: event.target.player1.value,\n        score: 0,\n      },\n      player2: {\n        name: event.target.player2.value,\n        score: 0,\n      },\n      // activePlayer: CONST.player1,\n    });\n    setHasGameStarted(true);\n  };\n  const onLoadOldGame = () => {\n    const parsedGame = JSON.parse(game);\n    setGame(parsedGame);\n    // setActivePlayer(parsedGame.activePlayer);\n    setHasGameStarted(true);\n  }\n  const onPlayerHand = (ref) => {\n    const choice1 = choices[Math.floor(Math.random() * 3)];\n    const choice2 = choices[Math.floor(Math.random() * 3)];\n    ref.current.classList.remove('rock', 'paper', 'sissors');\n    setTimeout(() => ref.current.classList.add(choice1));\n    setTimeout(() => {\n      hand2.current.classList.remove('rock', 'paper', 'sissors');\n      setTimeout(() => hand2.current.classList.add(choice2));\n\n      const temp = {...game};\n      const player1 = temp.player1.score;\n      const player2 = temp.player2.score;\n      temp.player1.score = compareHands(choice1, choice2) ? player1 + 1 : player1;\n      temp.player2.score = compareHands(choice2, choice1) ? player2 + 1 : player2;\n      setGame(temp);\n      localStorage.setItem('rockpapersissors', JSON.stringify(temp));\n    }, 500);\n  }\n  const getHandClasslist = (index) => {\n    let classList = 'hand';\n    if (activePlayer == index) classList += ' active';\n    else classList += ' disabled';\n    return classList;\n  }\n  const compareHands = (a, b) => {\n    return (a == 'rock' && b == 'sissors')\n      || (a == 'paper' && b == 'rock')\n      || (a == 'sissors' && b == 'paper');\n  }\n\n  return (\n    <div className=\"app\">\n        {!hasGameStarted && <div className=\"model\">\n          <div className=\"container\">\n            <h2>{CONST.title}</h2>\n              {configNewGame ? <form onSubmit={(event) => onStartNewGame(event)}>\n                {[1,2].map((index) => getPlayerNameFieldHTML(index))}\n                <button>{CONST.startGameBtn}</button>\n              </form> : <div className=\"controls\">\n                <button onClick={() => setConfigNewGame(true)}>{CONST.newGameBtn}</button>\n                <button onClick={() => onLoadOldGame()} disabled={!game}>{CONST.loadGameBtn}</button>\n              </div>}\n          </div>\n        </div>}\n      {hasGameStarted && <div className=\"game\">\n        <div className=\"header\">\n          {getPlayerHeaderHTML(CONST.player1)}\n          <p>{CONST.vsLabel}</p>\n          {getPlayerHeaderHTML(CONST.player2)}\n        </div>\n        <div className=\"container\">\n          <div className=\"player\"><div ref={hand1} className={getHandClasslist(CONST.player1)} onClick={() => onPlayerHand(hand1)}></div></div>\n          <div className=\"player\"><div ref={hand2} className={getHandClasslist(CONST.player2)}></div></div>\n        </div>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/admin/Projects/rockypapersissors/src/reportWebVitals.js",[],[],"/Users/admin/Projects/rockypapersissors/src/App.constant.js",[],[],[],{"ruleId":"39","severity":1,"message":"40","line":1,"column":23,"nodeType":"41","messageId":"42","endLine":1,"endColumn":32},{"ruleId":"39","severity":1,"message":"43","line":13,"column":24,"nodeType":"41","messageId":"42","endLine":13,"endColumn":39},{"ruleId":"44","severity":1,"message":"45","line":15,"column":26,"nodeType":"41","endLine":15,"endColumn":37},{"ruleId":"46","severity":1,"message":"47","line":15,"column":55,"nodeType":"48","messageId":"49","endLine":15,"endColumn":57},{"ruleId":"44","severity":1,"message":"45","line":16,"column":25,"nodeType":"41","endLine":16,"endColumn":36},{"ruleId":"44","severity":1,"message":"45","line":17,"column":26,"nodeType":"41","endLine":17,"endColumn":37},{"ruleId":"44","severity":1,"message":"45","line":19,"column":31,"nodeType":"41","endLine":19,"endColumn":42},{"ruleId":"44","severity":1,"message":"45","line":23,"column":34,"nodeType":"41","endLine":23,"endColumn":45},{"ruleId":"46","severity":1,"message":"47","line":67,"column":22,"nodeType":"48","messageId":"49","endLine":67,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":72,"column":15,"nodeType":"48","messageId":"49","endLine":72,"endColumn":17},{"ruleId":"46","severity":1,"message":"47","line":72,"column":30,"nodeType":"48","messageId":"49","endLine":72,"endColumn":32},{"ruleId":"46","severity":1,"message":"47","line":73,"column":13,"nodeType":"48","messageId":"49","endLine":73,"endColumn":15},{"ruleId":"46","severity":1,"message":"47","line":73,"column":29,"nodeType":"48","messageId":"49","endLine":73,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":74,"column":13,"nodeType":"48","messageId":"49","endLine":74,"endColumn":15},{"ruleId":"46","severity":1,"message":"47","line":74,"column":31,"nodeType":"48","messageId":"49","endLine":74,"endColumn":33},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setActivePlayer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]